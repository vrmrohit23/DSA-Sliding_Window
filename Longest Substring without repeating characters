class Solution {
    public int lengthOfLongestSubstring(String s) {
        // Initialize a HashSet to store characters of the current substring
        HashSet<Character> hs = new HashSet<>();
        
        // Variable to store the maximum length of the substring found
        int max = 0;
        
        // Pointers for the sliding window
        int left = 0, right = 0;
        
        // Length of the input string
        int n = s.length();
        
        // Loop through the string with the right pointer
        while (right < n) {
            char c = s.charAt(right); // Get the current character
            
            // If the character is already in the set, move the left pointer
            // to remove characters until the current character is no longer in the set
            while (hs.contains(c)) {
                hs.remove(s.charAt(left)); // Remove character at the left pointer
                left++; // Move the left pointer to the right
            }
            
            // Update the maximum length if the current substring is longer
            max = Math.max(right - left, max);
            
            // Add the current character to the set and move the right pointer
            hs.add(c);
            right++;
        }
        
        // Return the maximum length of substring without repeating characters
        return max;
    }
}

